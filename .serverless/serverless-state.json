{
  "service": {
    "service": "customer-order-service",
    "serviceObject": {
      "name": "customer-order-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "ap-northeast-1",
      "stage": "dev",
      "environment": {
        "DYNAMODB_CUSTOMERS_TABLE": "customers-dev",
        "DYNAMODB_ADDRESSES_TABLE": "addresses-dev",
        "DYNAMODB_ORDERS_TABLE": "orders-dev",
        "DYNAMODB_ITEMS_TABLE": "items-dev"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:ap-northeast-1:722017363230:table/customers-dev",
            "arn:aws:dynamodb:ap-northeast-1:722017363230:table/addresses-dev",
            "arn:aws:dynamodb:ap-northeast-1:722017363230:table/orders-dev",
            "arn:aws:dynamodb:ap-northeast-1:722017363230:table/items-dev"
          ]
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/customer-order-service-dev-createCustomer"
            }
          },
          "GetCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/customer-order-service-dev-getCustomer"
            }
          },
          "GetAllCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/customer-order-service-dev-getAllCustomer"
            }
          },
          "UpdateCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/customer-order-service-dev-updateCustomer"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "customer-order-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/customer-order-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/customer-order-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "customer-order-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/customer-order-service/dev/1749022345595-2025-06-04T07:32:25.595Z/customer-order-service.zip"
              },
              "Handler": "src/customer/create.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "customer-order-service-dev-createCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_CUSTOMERS_TABLE": "customers-dev",
                  "DYNAMODB_ADDRESSES_TABLE": "addresses-dev",
                  "DYNAMODB_ORDERS_TABLE": "orders-dev",
                  "DYNAMODB_ITEMS_TABLE": "items-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCustomerLogGroup"
            ]
          },
          "GetCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/customer-order-service/dev/1749022345595-2025-06-04T07:32:25.595Z/customer-order-service.zip"
              },
              "Handler": "src/customer/get.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "customer-order-service-dev-getCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_CUSTOMERS_TABLE": "customers-dev",
                  "DYNAMODB_ADDRESSES_TABLE": "addresses-dev",
                  "DYNAMODB_ORDERS_TABLE": "orders-dev",
                  "DYNAMODB_ITEMS_TABLE": "items-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCustomerLogGroup"
            ]
          },
          "GetAllCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/customer-order-service/dev/1749022345595-2025-06-04T07:32:25.595Z/customer-order-service.zip"
              },
              "Handler": "src/customer/getAll.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "customer-order-service-dev-getAllCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_CUSTOMERS_TABLE": "customers-dev",
                  "DYNAMODB_ADDRESSES_TABLE": "addresses-dev",
                  "DYNAMODB_ORDERS_TABLE": "orders-dev",
                  "DYNAMODB_ITEMS_TABLE": "items-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllCustomerLogGroup"
            ]
          },
          "UpdateCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/customer-order-service/dev/1749022345595-2025-06-04T07:32:25.595Z/customer-order-service.zip"
              },
              "Handler": "src/customer/update.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "customer-order-service-dev-updateCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_CUSTOMERS_TABLE": "customers-dev",
                  "DYNAMODB_ADDRESSES_TABLE": "addresses-dev",
                  "DYNAMODB_ORDERS_TABLE": "orders-dev",
                  "DYNAMODB_ITEMS_TABLE": "items-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateCustomerLogGroup"
            ]
          },
          "CreateCustomerLambdaVersion0FJnIVuxHUB0GjgD6O0K3E3gtTCrSMzgE8jYfPQv3MM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCustomerLambdaFunction"
              },
              "CodeSha256": "mzBtlBpd5DlL8pG0oYgcAvShFKnJL2D6uk2AbxDQ3NQ="
            }
          },
          "GetCustomerLambdaVersionSWpURQrrCkDr14GzffbH4muFJnipl7V72FxHe9Kw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCustomerLambdaFunction"
              },
              "CodeSha256": "mzBtlBpd5DlL8pG0oYgcAvShFKnJL2D6uk2AbxDQ3NQ="
            }
          },
          "GetAllCustomerLambdaVersionBbDmh4rL7IOlqNzwgPLUdGSjzxpK0U2iwvKQ7U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllCustomerLambdaFunction"
              },
              "CodeSha256": "mzBtlBpd5DlL8pG0oYgcAvShFKnJL2D6uk2AbxDQ3NQ="
            }
          },
          "UpdateCustomerLambdaVersionKK8txdPPEbuK5ry3f7CZt9vXaW3n8GinBIimxwK3jk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateCustomerLambdaFunction"
              },
              "CodeSha256": "mzBtlBpd5DlL8pG0oYgcAvShFKnJL2D6uk2AbxDQ3NQ="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-customer-order-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceCustomers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "customers",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCustomersCustomeridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCustomers"
              },
              "PathPart": "{customerId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCustomersAll": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCustomers"
              },
              "PathPart": "all",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCustomersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateCustomerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCustomersCustomeridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.customerId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomersCustomeridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCustomerorderserviceRequestValidator"
              }
            },
            "DependsOn": [
              "GetCustomerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCustomersAllGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomersAll"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllCustomerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCustomersCustomeridVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.customerId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomersCustomeridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCustomerorderserviceRequestValidator"
              }
            },
            "DependsOn": [
              "UpdateCustomerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayCustomerorderserviceRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "customer-order-service-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayDeployment1749022338607": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodCustomersPost",
              "ApiGatewayMethodCustomersCustomeridVarGet",
              "ApiGatewayMethodCustomersAllGet",
              "ApiGatewayMethodCustomersCustomeridVarPut"
            ]
          },
          "CreateCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CustomersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "customers-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "customerId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "customerId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AddressesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "addresses-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "addressId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "customerId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "addressId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "customerId",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "OrdersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "orders-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "orderId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "customerId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "orderId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "customerId",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "ItemsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "items-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "itemId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "itemId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-customer-order-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCustomerLambdaVersion0FJnIVuxHUB0GjgD6O0K3E3gtTCrSMzgE8jYfPQv3MM"
            },
            "Export": {
              "Name": "sls-customer-order-service-dev-CreateCustomerLambdaFunctionQualifiedArn"
            }
          },
          "GetCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCustomerLambdaVersionSWpURQrrCkDr14GzffbH4muFJnipl7V72FxHe9Kw"
            },
            "Export": {
              "Name": "sls-customer-order-service-dev-GetCustomerLambdaFunctionQualifiedArn"
            }
          },
          "GetAllCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllCustomerLambdaVersionBbDmh4rL7IOlqNzwgPLUdGSjzxpK0U2iwvKQ7U"
            },
            "Export": {
              "Name": "sls-customer-order-service-dev-GetAllCustomerLambdaFunctionQualifiedArn"
            }
          },
          "UpdateCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateCustomerLambdaVersionKK8txdPPEbuK5ry3f7CZt9vXaW3n8GinBIimxwK3jk"
            },
            "Export": {
              "Name": "sls-customer-order-service-dev-UpdateCustomerLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-customer-order-service-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-esbuild",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "createCustomer": {
        "handler": "src/customer/create.handler",
        "events": [
          {
            "http": {
              "path": "customers",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "customer-order-service-dev-createCustomer",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateCustomerLambdaVersion0FJnIVuxHUB0GjgD6O0K3E3gtTCrSMzgE8jYfPQv3MM"
      },
      "getCustomer": {
        "handler": "src/customer/get.handler",
        "events": [
          {
            "http": {
              "path": "customers/{customerId}",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.path.customerId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "customer-order-service-dev-getCustomer",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetCustomerLambdaVersionSWpURQrrCkDr14GzffbH4muFJnipl7V72FxHe9Kw"
      },
      "getAllCustomer": {
        "handler": "src/customer/getAll.handler",
        "events": [
          {
            "http": {
              "path": "customers/all",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "customer-order-service-dev-getAllCustomer",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAllCustomerLambdaVersionBbDmh4rL7IOlqNzwgPLUdGSjzxpK0U2iwvKQ7U"
      },
      "updateCustomer": {
        "handler": "src/customer/update.handler",
        "events": [
          {
            "http": {
              "path": "customers/{customerId}",
              "method": "put",
              "request": {
                "parameters": {
                  "method.request.path.customerId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "customer-order-service-dev-updateCustomer",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateCustomerLambdaVersionKK8txdPPEbuK5ry3f7CZt9vXaW3n8GinBIimxwK3jk"
      }
    },
    "resources": {
      "Resources": {
        "CustomersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "customers-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "customerId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "customerId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "AddressesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "addresses-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "addressId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "customerId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "addressId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "customerId",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "OrdersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "orders-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "orderId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "customerId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "orderId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "customerId",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "ItemsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "items-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "itemId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "itemId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "org": "hyniva123",
      "service": "customer-order-service",
      "frameworkVersion": ">=3.0.0",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "org": "hyniva123",
    "layers": {},
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/customer-order-service/dev/1749022345595-2025-06-04T07:32:25.595Z",
    "artifact": "customer-order-service.zip"
  }
}